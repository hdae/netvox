/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * VOICEVOX Engine
 * VOICEVOXの音声合成エンジンです。
 * OpenAPI spec version: 0.19.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type SupportedDevicesSupportedDevicesGetParams = {
core_version?: string;
};

/**
 * インポートするユーザー辞書のデータ
 */
export type ImportUserDictWordsImportUserDictPostBody = {[key: string]: UserDictWord};

export type ImportUserDictWordsImportUserDictPostParams = {
/**
 * 重複したエントリがあった場合、上書きするかどうか
 */
override: boolean;
};

export type RewriteUserDictWordUserDictWordWordUuidPutParams = {
/**
 * 言葉の表層形
 */
surface: string;
/**
 * 言葉の発音（カタカナ）
 */
pronunciation: string;
/**
 * アクセント型（音が下がる場所を指す）
 */
accent_type: number;
/**
 * PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか
 */
word_type?: WordTypes;
/**
 * 単語の優先度（0から10までの整数）。数字が大きいほど優先度が高くなる。1から9までの値を指定することを推奨。
 */
priority?: number;
};

export type AddUserDictWordUserDictWordPostParams = {
/**
 * 言葉の表層形
 */
surface: string;
/**
 * 言葉の発音（カタカナ）
 */
pronunciation: string;
/**
 * アクセント型（音が下がる場所を指す）
 */
accent_type: number;
/**
 * PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか
 */
word_type?: WordTypes;
/**
 * 単語の優先度（0から10までの整数）。数字が大きいほど優先度が高くなる。1から9までの値を指定することを推奨
 */
priority?: number;
};

export type GetUserDictWordsUserDictGet200 = {[key: string]: UserDictWord};

export type IsInitializedSpeakerIsInitializedSpeakerGetParams = {
speaker: number;
core_version?: string;
};

export type InitializeSpeakerInitializeSpeakerPostParams = {
speaker: number;
/**
 * 既に初期化済みのスタイルの再初期化をスキップするかどうか
 */
skip_reinit?: boolean;
core_version?: string;
};

export type InstalledLibrariesInstalledLibrariesGet200 = {[key: string]: InstalledLibraryInfo};

export type SingerInfoSingerInfoGetParams = {
speaker_uuid: string;
core_version?: string;
};

export type SingersSingersGetParams = {
core_version?: string;
};

export type SpeakerInfoSpeakerInfoGetParams = {
speaker_uuid: string;
core_version?: string;
};

export type SpeakersSpeakersGetParams = {
core_version?: string;
};

export type DeletePresetDeletePresetPostParams = {
/**
 * 削除するプリセットのプリセットID
 */
id: number;
};

export type SynthesisMorphingSynthesisMorphingPostParams = {
base_speaker: number;
target_speaker: number;
morph_rate: number;
core_version?: string;
};

export type MorphableTargetsMorphableTargetsPost200Item = {[key: string]: MorphableTargetInfo};

export type MorphableTargetsMorphableTargetsPostParams = {
core_version?: string;
};

export type ValidateKanaValidateKanaPostParams = {
/**
 * 判定する対象の文字列
 */
text: string;
};

export type FrameSynthesisFrameSynthesisPostParams = {
speaker: number;
core_version?: string;
};

export type SingFrameVolumeSingFrameVolumePostParams = {
speaker: number;
core_version?: string;
};

export type SingFrameAudioQuerySingFrameAudioQueryPostParams = {
speaker: number;
core_version?: string;
};

export type MultiSynthesisMultiSynthesisPostParams = {
speaker: number;
core_version?: string;
};

export type CancellableSynthesisCancellableSynthesisPostParams = {
speaker: number;
core_version?: string;
};

export type SynthesisSynthesisPostParams = {
speaker: number;
/**
 * 疑問系のテキストが与えられたら語尾を自動調整する
 */
enable_interrogative_upspeak?: boolean;
core_version?: string;
};

export type MoraPitchMoraPitchPostParams = {
speaker: number;
core_version?: string;
};

export type MoraLengthMoraLengthPostParams = {
speaker: number;
core_version?: string;
};

export type MoraDataMoraDataPostParams = {
speaker: number;
core_version?: string;
};

export type AccentPhrasesAccentPhrasesPostParams = {
text: string;
speaker: number;
is_kana?: boolean;
core_version?: string;
};

export type AudioQueryFromPresetAudioQueryFromPresetPostParams = {
text: string;
preset_id: number;
core_version?: string;
};

export type AudioQueryAudioQueryPostParams = {
text: string;
speaker: number;
core_version?: string;
};

/**
 * 音声ライブラリの情報
 */
export interface BaseLibraryInfo {
  bytes: number;
  download_url: string;
  name: string;
  speakers: LibrarySpeaker[];
  uuid: string;
  version: string;
}

/**
 * vvlib(VOICEVOX Library)に関する情報
 */
export interface VvlibManifest {
  brand_name: string;
  engine_name: string;
  engine_uuid: string;
  manifest_version: string;
  name: string;
  uuid: string;
  version: string;
}

/**
 * fastapiでword_type引数を検証する時に使用するクラス
 */
export type WordTypes = typeof WordTypes[keyof typeof WordTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WordTypes = {
  PROPER_NOUN: 'PROPER_NOUN',
  COMMON_NOUN: 'COMMON_NOUN',
  VERB: 'VERB',
  ADJECTIVE: 'ADJECTIVE',
  SUFFIX: 'SUFFIX',
} as const;

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * 辞書のコンパイルに使われる情報
 */
export interface UserDictWord {
  accent_associative_rule: string;
  accent_type: number;
  context_id?: number;
  inflectional_form: string;
  inflectional_type: string;
  mora_count?: number;
  part_of_speech: string;
  part_of_speech_detail_1: string;
  part_of_speech_detail_2: string;
  part_of_speech_detail_3: string;
  /**
   * @minimum 0
   * @maximum 10
   */
  priority: number;
  pronunciation: string;
  stem: string;
  surface: string;
  yomi: string;
}

/**
 * エンジンのアップデート情報
 */
export interface UpdateInfo {
  contributors?: string[];
  descriptions: string[];
  version: string;
}

/**
 * エンジンが持つ機能の一覧
 */
export interface SupportedFeatures {
  adjust_intonation_scale: boolean;
  adjust_mora_pitch: boolean;
  adjust_phoneme_length: boolean;
  adjust_pitch_scale: boolean;
  adjust_speed_scale: boolean;
  adjust_volume_scale: boolean;
  interrogative_upspeak: boolean;
  manage_library?: boolean;
  sing?: boolean;
  synthesis_morphing: boolean;
}

/**
 * 対応しているデバイスの情報
 */
export interface SupportedDevicesInfo {
  cpu: boolean;
  cuda: boolean;
  dml: boolean;
}

/**
 * スタイルの追加情報
 */
export interface StyleInfo {
  icon: string;
  id: number;
  portrait?: string;
  voice_samples: string[];
}

/**
 * An enumeration.
 */
export type SpeakerSupportPermittedSynthesisMorphing = typeof SpeakerSupportPermittedSynthesisMorphing[keyof typeof SpeakerSupportPermittedSynthesisMorphing];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SpeakerSupportPermittedSynthesisMorphing = {
  ALL: 'ALL',
  SELF_ONLY: 'SELF_ONLY',
  NOTHING: 'NOTHING',
} as const;

/**
 * 話者の対応機能の情報
 */
export interface SpeakerSupportedFeatures {
  permitted_synthesis_morphing?: SpeakerSupportPermittedSynthesisMorphing;
}

export type SpeakerStyleType = typeof SpeakerStyleType[keyof typeof SpeakerStyleType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SpeakerStyleType = {
  talk: 'talk',
  singing_teacher: 'singing_teacher',
  frame_decode: 'frame_decode',
  sing: 'sing',
} as const;

/**
 * 話者のスタイル情報
 */
export interface SpeakerStyle {
  id: number;
  name: string;
  type?: SpeakerStyleType;
}

/**
 * 話者の追加情報
 */
export interface SpeakerInfo {
  policy: string;
  portrait: string;
  style_infos: StyleInfo[];
}

/**
 * 話者情報
 */
export interface Speaker {
  name: string;
  speaker_uuid: string;
  styles: SpeakerStyle[];
  supported_features?: SpeakerSupportedFeatures;
  version?: string;
}

/**
 * 楽譜情報
 */
export interface Score {
  notes: Note[];
}

/**
 * プリセット情報
 */
export interface Preset {
  id: number;
  intonationScale: number;
  name: string;
  pitchScale: number;
  postPhonemeLength: number;
  prePhonemeLength: number;
  speaker_uuid: string;
  speedScale: number;
  style_id: number;
  volumeScale: number;
}

export type ParseKanaBadRequestErrorArgs = {[key: string]: string};

export interface ParseKanaBadRequest {
  error_args: ParseKanaBadRequestErrorArgs;
  /** |name|description|
|---|---|
| UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |
| ACCENT_TOP | 句頭にアクセントは置けません: {text} |
| ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |
| ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |
| EMPTY_PHRASE | {position}番目のアクセント句が空白です |
| INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |
| INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 | */
  error_name: string;
  text: string;
}

/**
 * 音符ごとの情報
 */
export interface Note {
  frame_length: number;
  key?: number;
  lyric: string;
}

export interface MorphableTargetInfo {
  is_morphable: boolean;
}

/**
 * モーラ（子音＋母音）ごとの情報
 */
export interface Mora {
  consonant?: string;
  consonant_length?: number;
  pitch: number;
  text: string;
  vowel: string;
  vowel_length: number;
}

/**
 * 依存ライブラリのライセンス情報
 */
export interface LicenseInfo {
  license?: string;
  name: string;
  text: string;
  version?: string;
}

/**
 * 音声ライブラリに含まれる話者の情報
 */
export interface LibrarySpeaker {
  speaker: Speaker;
  speaker_info: SpeakerInfo;
}

/**
 * インストール済み音声ライブラリの情報
 */
export interface InstalledLibraryInfo {
  bytes: number;
  download_url: string;
  name: string;
  speakers: LibrarySpeaker[];
  uninstallable: boolean;
  uuid: string;
  version: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

/**
 * 音素の情報
 */
export interface FramePhoneme {
  frame_length: number;
  phoneme: string;
}

/**
 * フレームごとの音声合成用のクエリ
 */
export interface FrameAudioQuery {
  f0: number[];
  outputSamplingRate: number;
  outputStereo: boolean;
  phonemes: FramePhoneme[];
  volume: number[];
  volumeScale: number;
}

/**
 * エンジン自体に関する情報
 */
export interface EngineManifest {
  brand_name: string;
  default_sampling_rate: number;
  dependency_licenses: LicenseInfo[];
  frame_rate: number;
  icon: string;
  manifest_version: string;
  name: string;
  supported_features: SupportedFeatures;
  supported_vvlib_manifest_version?: string;
  terms_of_service: string;
  update_infos: UpdateInfo[];
  url: string;
  uuid: string;
}

/**
 * ダウンロード可能な音声ライブラリの情報
 */
export interface DownloadableLibraryInfo {
  bytes: number;
  download_url: string;
  name: string;
  speakers: LibrarySpeaker[];
  uuid: string;
  version: string;
}

/**
 * CORSの許可モード
 */
export type CorsPolicyMode = typeof CorsPolicyMode[keyof typeof CorsPolicyMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CorsPolicyMode = {
  all: 'all',
  localapps: 'localapps',
} as const;

export interface BodySingFrameVolumeSingFrameVolumePost {
  frame_audio_query: FrameAudioQuery;
  score: Score;
}

export interface BodySettingPostSettingPost {
  allow_origin?: string;
  cors_policy_mode: CorsPolicyMode;
}

/**
 * アクセント句ごとの情報
 */
export interface AccentPhrase {
  accent: number;
  is_interrogative?: boolean;
  moras: Mora[];
  pause_mora?: Mora;
}

/**
 * 音声合成用のクエリ
 */
export interface AudioQuery {
  accent_phrases: AccentPhrase[];
  intonationScale: number;
  kana?: string;
  outputSamplingRate: number;
  outputStereo: boolean;
  pitchScale: number;
  postPhonemeLength: number;
  prePhonemeLength: number;
  speedScale: number;
  volumeScale: number;
}





  /**
 * 音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。
 * @summary 音声合成用のクエリを作成する
 */
export const audioQueryAudioQueryPost = <TData = AxiosResponse<AudioQuery>>(
    params: AudioQueryAudioQueryPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/audio_query`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。
 * @summary 音声合成用のクエリをプリセットを用いて作成する
 */
export const audioQueryFromPresetAudioQueryFromPresetPost = <TData = AxiosResponse<AudioQuery>>(
    params: AudioQueryFromPresetAudioQueryFromPresetPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/audio_query_from_preset`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * テキストからアクセント句を得ます。
is_kanaが`true`のとき、テキストは次のAquesTalk 風記法で解釈されます。デフォルトは`false`です。
* 全てのカナはカタカナで記述される
* アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。
* カナの手前に`_`を入れるとそのカナは無声化される
* アクセント位置を`'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。
* アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。
 * @summary テキストからアクセント句を得る
 */
export const accentPhrasesAccentPhrasesPost = <TData = AxiosResponse<AccentPhrase[]>>(
    params: AccentPhrasesAccentPhrasesPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/accent_phrases`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary アクセント句から音高・音素長を得る
 */
export const moraDataMoraDataPost = <TData = AxiosResponse<AccentPhrase[]>>(
    accentPhrase: AccentPhrase[],
    params: MoraDataMoraDataPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/mora_data`,
      accentPhrase,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary アクセント句から音素長を得る
 */
export const moraLengthMoraLengthPost = <TData = AxiosResponse<AccentPhrase[]>>(
    accentPhrase: AccentPhrase[],
    params: MoraLengthMoraLengthPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/mora_length`,
      accentPhrase,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary アクセント句から音高を得る
 */
export const moraPitchMoraPitchPost = <TData = AxiosResponse<AccentPhrase[]>>(
    accentPhrase: AccentPhrase[],
    params: MoraPitchMoraPitchPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/mora_pitch`,
      accentPhrase,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary 音声合成する
 */
export const synthesisSynthesisPost = <TData = AxiosResponse<Blob>>(
    audioQuery: AudioQuery,
    params: SynthesisSynthesisPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/synthesis`,
      audioQuery,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary 音声合成する（キャンセル可能）
 */
export const cancellableSynthesisCancellableSynthesisPost = <TData = AxiosResponse<Blob>>(
    audioQuery: AudioQuery,
    params: CancellableSynthesisCancellableSynthesisPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/cancellable_synthesis`,
      audioQuery,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary 複数まとめて音声合成する
 */
export const multiSynthesisMultiSynthesisPost = <TData = AxiosResponse<Blob>>(
    audioQuery: AudioQuery[],
    params: MultiSynthesisMultiSynthesisPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/multi_synthesis`,
      audioQuery,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 歌唱音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま歌唱音声合成に利用できます。各値の意味は`Schemas`を参照してください。
 * @summary 歌唱音声合成用のクエリを作成する
 */
export const singFrameAudioQuerySingFrameAudioQueryPost = <TData = AxiosResponse<FrameAudioQuery>>(
    score: Score,
    params: SingFrameAudioQuerySingFrameAudioQueryPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/sing_frame_audio_query`,
      score,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary スコア・歌唱音声合成用のクエリからフレームごとの音量を得る
 */
export const singFrameVolumeSingFrameVolumePost = <TData = AxiosResponse<number[]>>(
    bodySingFrameVolumeSingFrameVolumePost: BodySingFrameVolumeSingFrameVolumePost,
    params: SingFrameVolumeSingFrameVolumePostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/sing_frame_volume`,
      bodySingFrameVolumeSingFrameVolumePost,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 歌唱音声合成を行います。
 * @summary Frame Synthesis
 */
export const frameSynthesisFrameSynthesisPost = <TData = AxiosResponse<Blob>>(
    frameAudioQuery: FrameAudioQuery,
    params: FrameSynthesisFrameSynthesisPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/frame_synthesis`,
      frameAudioQuery,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。
 * @summary base64エンコードされた複数のwavデータを一つに結合する
 */
export const connectWavesConnectWavesPost = <TData = AxiosResponse<Blob>>(
    connectWavesConnectWavesPostBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/connect_waves`,
      connectWavesConnectWavesPostBody,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * テキストがAquesTalk 風記法に従っているかどうかを判定します。
従っていない場合はエラーが返ります。
 * @summary テキストがAquesTalk 風記法に従っているか判定する
 */
export const validateKanaValidateKanaPost = <TData = AxiosResponse<boolean>>(
    params: ValidateKanaValidateKanaPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/validate_kana`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 指定されたベーススタイルに対してエンジン内の各話者がモーフィング機能を利用可能か返します。
モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。
プロパティが存在しない場合は、モーフィングが許可されているとみなします。
返り値のスタイルIDはstring型なので注意。
 * @summary 指定したスタイルに対してエンジン内の話者がモーフィングが可能か判定する
 */
export const morphableTargetsMorphableTargetsPost = <TData = AxiosResponse<MorphableTargetsMorphableTargetsPost200Item[]>>(
    morphableTargetsMorphableTargetsPostBody: number[],
    params?: MorphableTargetsMorphableTargetsPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/morphable_targets`,
      morphableTargetsMorphableTargetsPostBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 指定された2種類のスタイルで音声を合成、指定した割合でモーフィングした音声を得ます。
モーフィングの割合は`morph_rate`で指定でき、0.0でベースのスタイル、1.0でターゲットのスタイルに近づきます。
 * @summary 2種類のスタイルでモーフィングした音声を合成する
 */
export const synthesisMorphingSynthesisMorphingPost = <TData = AxiosResponse<Blob>>(
    audioQuery: AudioQuery,
    params: SynthesisMorphingSynthesisMorphingPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/synthesis_morphing`,
      audioQuery,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * エンジンが保持しているプリセットの設定を返します
 * @summary Get Presets
 */
export const getPresetsPresetsGet = <TData = AxiosResponse<Preset[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/presets`,options
    );
  }

/**
 * 新しいプリセットを追加します
 * @summary Add Preset
 */
export const addPresetAddPresetPost = <TData = AxiosResponse<number>>(
    preset: Preset, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/add_preset`,
      preset,options
    );
  }

/**
 * 既存のプリセットを更新します
 * @summary Update Preset
 */
export const updatePresetUpdatePresetPost = <TData = AxiosResponse<number>>(
    preset: Preset, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/update_preset`,
      preset,options
    );
  }

/**
 * 既存のプリセットを削除します
 * @summary Delete Preset
 */
export const deletePresetDeletePresetPost = <TData = AxiosResponse<void>>(
    params: DeletePresetDeletePresetPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/delete_preset`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Version
 */
export const versionVersionGet = <TData = AxiosResponse<string>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/version`,options
    );
  }

/**
 * @summary Core Versions
 */
export const coreVersionsCoreVersionsGet = <TData = AxiosResponse<string[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/core_versions`,options
    );
  }

/**
 * @summary Speakers
 */
export const speakersSpeakersGet = <TData = AxiosResponse<Speaker[]>>(
    params?: SpeakersSpeakersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/speakers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 指定されたspeaker_uuidに関する情報をjson形式で返します。
画像や音声はbase64エンコードされたものが返されます。
 * @summary Speaker Info
 */
export const speakerInfoSpeakerInfoGet = <TData = AxiosResponse<SpeakerInfo>>(
    params: SpeakerInfoSpeakerInfoGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/speaker_info`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Singers
 */
export const singersSingersGet = <TData = AxiosResponse<Speaker[]>>(
    params?: SingersSingersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/singers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 指定されたspeaker_uuidに関する情報をjson形式で返します。
画像や音声はbase64エンコードされたものが返されます。
 * @summary Singer Info
 */
export const singerInfoSingerInfoGet = <TData = AxiosResponse<SpeakerInfo>>(
    params: SingerInfoSingerInfoGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/singer_info`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * ダウンロード可能な音声ライブラリの情報を返します。
 * @summary Downloadable Libraries
 */
export const downloadableLibrariesDownloadableLibrariesGet = <TData = AxiosResponse<DownloadableLibraryInfo[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/downloadable_libraries`,options
    );
  }

/**
 * インストールした音声ライブラリの情報を返します。
 * @summary Installed Libraries
 */
export const installedLibrariesInstalledLibrariesGet = <TData = AxiosResponse<InstalledLibrariesInstalledLibrariesGet200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/installed_libraries`,options
    );
  }

/**
 * 音声ライブラリをインストールします。
音声ライブラリのZIPファイルをリクエストボディとして送信してください。
 * @summary Install Library
 */
export const installLibraryInstallLibraryLibraryUuidPost = <TData = AxiosResponse<void>>(
    libraryUuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/install_library/${libraryUuid}`,undefined,options
    );
  }

/**
 * 音声ライブラリをアンインストールします。
 * @summary Uninstall Library
 */
export const uninstallLibraryUninstallLibraryLibraryUuidPost = <TData = AxiosResponse<void>>(
    libraryUuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/uninstall_library/${libraryUuid}`,undefined,options
    );
  }

/**
 * 指定されたスタイルを初期化します。
実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。
 * @summary Initialize Speaker
 */
export const initializeSpeakerInitializeSpeakerPost = <TData = AxiosResponse<void>>(
    params: InitializeSpeakerInitializeSpeakerPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/initialize_speaker`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * 指定されたスタイルが初期化されているかどうかを返します。
 * @summary Is Initialized Speaker
 */
export const isInitializedSpeakerIsInitializedSpeakerGet = <TData = AxiosResponse<boolean>>(
    params: IsInitializedSpeakerIsInitializedSpeakerGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/is_initialized_speaker`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * ユーザー辞書に登録されている単語の一覧を返します。
単語の表層形(surface)は正規化済みの物を返します。
 * @summary Get User Dict Words
 */
export const getUserDictWordsUserDictGet = <TData = AxiosResponse<GetUserDictWordsUserDictGet200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/user_dict`,options
    );
  }

/**
 * ユーザー辞書に言葉を追加します。
 * @summary Add User Dict Word
 */
export const addUserDictWordUserDictWordPost = <TData = AxiosResponse<string>>(
    params: AddUserDictWordUserDictWordPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/user_dict_word`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * ユーザー辞書に登録されている言葉を更新します。
 * @summary Rewrite User Dict Word
 */
export const rewriteUserDictWordUserDictWordWordUuidPut = <TData = AxiosResponse<void>>(
    wordUuid: string,
    params: RewriteUserDictWordUserDictWordWordUuidPutParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `http://localhost:50021/user_dict_word/${wordUuid}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * ユーザー辞書に登録されている言葉を削除します。
 * @summary Delete User Dict Word
 */
export const deleteUserDictWordUserDictWordWordUuidDelete = <TData = AxiosResponse<void>>(
    wordUuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `http://localhost:50021/user_dict_word/${wordUuid}`,options
    );
  }

/**
 * 他のユーザー辞書をインポートします。
 * @summary Import User Dict Words
 */
export const importUserDictWordsImportUserDictPost = <TData = AxiosResponse<void>>(
    importUserDictWordsImportUserDictPostBody: ImportUserDictWordsImportUserDictPostBody,
    params: ImportUserDictWordsImportUserDictPostParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:50021/import_user_dict`,
      importUserDictWordsImportUserDictPostBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Supported Devices
 */
export const supportedDevicesSupportedDevicesGet = <TData = AxiosResponse<SupportedDevicesInfo>>(
    params?: SupportedDevicesSupportedDevicesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/supported_devices`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Engine Manifest
 */
export const engineManifestEngineManifestGet = <TData = AxiosResponse<EngineManifest>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/engine_manifest`,options
    );
  }

/**
 * 設定ページを返します。
 * @summary Setting Get
 */
export const settingGetSettingGet = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:50021/setting`,options
    );
  }

/**
 * 設定を更新します。
 * @summary Setting Post
 */
export const settingPostSettingPost = <TData = AxiosResponse<void>>(
    bodySettingPostSettingPost: BodySettingPostSettingPost, options?: AxiosRequestConfig
 ): Promise<TData> => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append('cors_policy_mode', bodySettingPostSettingPost.cors_policy_mode)
if(bodySettingPostSettingPost.allow_origin !== undefined) {
 formUrlEncoded.append('allow_origin', bodySettingPostSettingPost.allow_origin)
 }

    return axios.default.post(
      `http://localhost:50021/setting`,
      formUrlEncoded,options
    );
  }

export type AudioQueryAudioQueryPostResult = AxiosResponse<AudioQuery>
export type AudioQueryFromPresetAudioQueryFromPresetPostResult = AxiosResponse<AudioQuery>
export type AccentPhrasesAccentPhrasesPostResult = AxiosResponse<AccentPhrase[]>
export type MoraDataMoraDataPostResult = AxiosResponse<AccentPhrase[]>
export type MoraLengthMoraLengthPostResult = AxiosResponse<AccentPhrase[]>
export type MoraPitchMoraPitchPostResult = AxiosResponse<AccentPhrase[]>
export type SynthesisSynthesisPostResult = AxiosResponse<Blob>
export type CancellableSynthesisCancellableSynthesisPostResult = AxiosResponse<Blob>
export type MultiSynthesisMultiSynthesisPostResult = AxiosResponse<Blob>
export type SingFrameAudioQuerySingFrameAudioQueryPostResult = AxiosResponse<FrameAudioQuery>
export type SingFrameVolumeSingFrameVolumePostResult = AxiosResponse<number[]>
export type FrameSynthesisFrameSynthesisPostResult = AxiosResponse<Blob>
export type ConnectWavesConnectWavesPostResult = AxiosResponse<Blob>
export type ValidateKanaValidateKanaPostResult = AxiosResponse<boolean>
export type MorphableTargetsMorphableTargetsPostResult = AxiosResponse<MorphableTargetsMorphableTargetsPost200Item[]>
export type SynthesisMorphingSynthesisMorphingPostResult = AxiosResponse<Blob>
export type GetPresetsPresetsGetResult = AxiosResponse<Preset[]>
export type AddPresetAddPresetPostResult = AxiosResponse<number>
export type UpdatePresetUpdatePresetPostResult = AxiosResponse<number>
export type DeletePresetDeletePresetPostResult = AxiosResponse<void>
export type VersionVersionGetResult = AxiosResponse<string>
export type CoreVersionsCoreVersionsGetResult = AxiosResponse<string[]>
export type SpeakersSpeakersGetResult = AxiosResponse<Speaker[]>
export type SpeakerInfoSpeakerInfoGetResult = AxiosResponse<SpeakerInfo>
export type SingersSingersGetResult = AxiosResponse<Speaker[]>
export type SingerInfoSingerInfoGetResult = AxiosResponse<SpeakerInfo>
export type DownloadableLibrariesDownloadableLibrariesGetResult = AxiosResponse<DownloadableLibraryInfo[]>
export type InstalledLibrariesInstalledLibrariesGetResult = AxiosResponse<InstalledLibrariesInstalledLibrariesGet200>
export type InstallLibraryInstallLibraryLibraryUuidPostResult = AxiosResponse<void>
export type UninstallLibraryUninstallLibraryLibraryUuidPostResult = AxiosResponse<void>
export type InitializeSpeakerInitializeSpeakerPostResult = AxiosResponse<void>
export type IsInitializedSpeakerIsInitializedSpeakerGetResult = AxiosResponse<boolean>
export type GetUserDictWordsUserDictGetResult = AxiosResponse<GetUserDictWordsUserDictGet200>
export type AddUserDictWordUserDictWordPostResult = AxiosResponse<string>
export type RewriteUserDictWordUserDictWordWordUuidPutResult = AxiosResponse<void>
export type DeleteUserDictWordUserDictWordWordUuidDeleteResult = AxiosResponse<void>
export type ImportUserDictWordsImportUserDictPostResult = AxiosResponse<void>
export type SupportedDevicesSupportedDevicesGetResult = AxiosResponse<SupportedDevicesInfo>
export type EngineManifestEngineManifestGetResult = AxiosResponse<EngineManifest>
export type SettingGetSettingGetResult = AxiosResponse<void>
export type SettingPostSettingPostResult = AxiosResponse<void>
